{"/home/travis/build/npmtest/node-npmtest-weinre/test.js":"/* istanbul instrument in package npmtest_weinre */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-weinre/lib.npmtest_weinre.js":"/* istanbul instrument in package npmtest_weinre */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_weinre = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_weinre = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-weinre/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-weinre && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_weinre */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_weinre\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_weinre.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_weinre.rollup.js'] =\n            local.assetsDict['/assets.npmtest_weinre.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_weinre.__dirname +\n                    '/lib.npmtest_weinre.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-weinre/weinre/lib/weinre.js":"// Generated by CoffeeScript 1.8.0\nvar HttpChannelHandler, Version, channelManager, checkForDeath, checkHost, deathTimeout, dns, dumpingHandler, express, fs, getStaticWebDir, getVersion, jsonBodyParser, net, path, processOptions, run2, serviceManager, startDeathWatcher, startServer, utils, _;\n\nfs = require('fs');\n\nnet = require('net');\n\ndns = require('dns');\n\npath = require('path');\n\n_ = require('underscore');\n\nexpress = require('express');\n\nutils = require('./utils');\n\njsonBodyParser = require('./jsonBodyParser');\n\nHttpChannelHandler = require('./HttpChannelHandler');\n\ndumpingHandler = require('./dumpingHandler');\n\nchannelManager = require('./channelManager');\n\nserviceManager = require('./serviceManager');\n\nexports.run = function(options) {\n  return processOptions(options, run2);\n};\n\nrun2 = function() {\n  var options;\n  options = utils.options;\n  serviceManager.registerProxyClass('WeinreClientEvents');\n  serviceManager.registerProxyClass('WeinreTargetEvents');\n  serviceManager.registerLocalClass('WeinreClientCommands');\n  serviceManager.registerLocalClass('WeinreTargetCommands');\n  startDeathWatcher(options.deathTimeout);\n  return startServer();\n};\n\nprocessOptions = function(options, cb) {\n  var name, nameLen, names, reducer, _i, _len;\n  options.httpPort = utils.ensureInteger(options.httpPort, 'the value of the option httpPort is not a number');\n  options.boundHost = utils.ensureString(options.boundHost, 'the value of the option boundHost is not a string');\n  options.verbose = utils.ensureBoolean(options.verbose, 'the value of the option verbose is not a boolean');\n  options.debug = utils.ensureBoolean(options.debug, 'the value of the option debug is not a boolean');\n  options.readTimeout = utils.ensureInteger(options.readTimeout, 'the value of the option readTimeout is not a number');\n  options.deathTimeout = utils.ensureInteger(options.deathTimeout, 'the value of the option deathTimeout is not a number');\n  if (options.debug) {\n    options.verbose = true;\n  }\n  options.staticWebDir = getStaticWebDir();\n  utils.logVerbose(\"pid:                 \" + process.pid);\n  utils.logVerbose(\"version:             \" + (getVersion()));\n  utils.logVerbose(\"node versions:\");\n  names = _.keys(process.versions);\n  reducer = function(memo, name) {\n    return Math.max(memo, name.length);\n  };\n  nameLen = _.reduce(names, reducer, 0);\n  for (_i = 0, _len = names.length; _i < _len; _i++) {\n    name = names[_i];\n    utils.logVerbose(\"   \" + (utils.alignLeft(name, nameLen)) + \": \" + process.versions[name]);\n  }\n  utils.logVerbose(\"options:\");\n  utils.logVerbose(\"   httpPort:     \" + options.httpPort);\n  utils.logVerbose(\"   boundHost:    \" + options.boundHost);\n  utils.logVerbose(\"   verbose:      \" + options.verbose);\n  utils.logVerbose(\"   debug:        \" + options.debug);\n  utils.logVerbose(\"   readTimeout:  \" + options.readTimeout);\n  utils.logVerbose(\"   deathTimeout: \" + options.deathTimeout);\n  utils.setOptions(options);\n  return checkHost(options.boundHost, function(err) {\n    if (err) {\n      utils.exit(\"unable to resolve boundHost address: \" + options.boundHost);\n    }\n    return cb();\n  });\n};\n\ncheckHost = function(hostName, cb) {\n  if (hostName === '-all-') {\n    return cb();\n  }\n  if (hostName === 'localhost') {\n    return cb();\n  }\n  if (net.isIP(hostName)) {\n    return cb();\n  }\n  return dns.lookup(hostName, cb);\n};\n\ndeathTimeout = null;\n\nstartDeathWatcher = function(timeout) {\n  deathTimeout = utils.options.deathTimeout * 1000;\n  return setInterval(checkForDeath, 1000);\n};\n\ncheckForDeath = function() {\n  var channel, now, _i, _len, _ref, _results;\n  now = (new Date).valueOf();\n  _ref = channelManager.getChannels();\n  _results = [];\n  for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n    channel = _ref[_i];\n    if (now - channel.lastRead > deathTimeout) {\n      _results.push(channel.close());\n    } else {\n      _results.push(void 0);\n    }\n  }\n  return _results;\n};\n\nstartServer = function() {\n  var app, clientHandler, favIcon, options, staticCacheOptions, targetHandler;\n  options = utils.options;\n  clientHandler = new HttpChannelHandler('/ws/client');\n  targetHandler = new HttpChannelHandler('/ws/target');\n  channelManager.initialize();\n  favIcon = \"\" + options.staticWebDir + \"/images/weinre-icon-32x32.png\";\n  staticCacheOptions = {\n    maxObjects: 500,\n    maxLength: 32 * 1024 * 1024\n  };\n  app = express.createServer();\n  app.on('error', function(error) {\n    return utils.exit(\"error running server: \" + error);\n  });\n  app.use(express.favicon(favIcon));\n  app.use(jsonBodyParser());\n  app.all(/^\\/ws\\/client(.*)/, function(request, response, next) {\n    var uri;\n    uri = request.params[0];\n    if (uri === '') {\n      uri = '/';\n    }\n    if (options.debug) {\n      dumpingHandler(request, response, uri);\n    }\n    return clientHandler.handle(request, response, uri);\n  });\n  app.all(/^\\/ws\\/target(.*)/, function(request, response, next) {\n    var uri;\n    uri = request.params[0];\n    if (uri === '') {\n      uri = '/';\n    }\n    if (options.debug) {\n      dumpingHandler(request, response, uri);\n    }\n    return targetHandler.handle(request, response, uri);\n  });\n  app.use(express.errorHandler({\n    dumpExceptions: true\n  }));\n  app.use(express.staticCache(staticCacheOptions));\n  app.use(express[\"static\"](options.staticWebDir));\n  if (options.boundHost === '-all-') {\n    utils.log(\"starting server at http://localhost:\" + options.httpPort);\n    return app.listen(options.httpPort);\n  } else {\n    utils.log(\"starting server at http://\" + options.boundHost + \":\" + options.httpPort);\n    return app.listen(options.httpPort, options.boundHost);\n  }\n};\n\ngetStaticWebDir = function() {\n  var webDir;\n  webDir = path.normalize(path.join(__dirname, '../web'));\n  if (utils.fileExistsSync(webDir)) {\n    return webDir;\n  }\n  return utils.exit('unable to find static files to serve in #{webDir}; did you do a build?');\n};\n\nVersion = null;\n\ngetVersion = exports.getVersion = function() {\n  var json, packageJsonName, values;\n  if (Version) {\n    return Version;\n  }\n  packageJsonName = path.join(path.dirname(fs.realpathSync(__filename)), '../package.json');\n  json = fs.readFileSync(packageJsonName, 'utf8');\n  values = JSON.parse(json);\n  Version = values.version;\n  return Version;\n};\n","/home/travis/build/npmtest/node-npmtest-weinre/weinre/lib/utils.js":"// Generated by CoffeeScript 1.8.0\nvar Program, SequenceNumber, SequenceNumberMax, fs, log, path, utils,\n  __hasProp = {}.hasOwnProperty;\n\nfs = require('fs');\n\npath = require('path');\n\nutils = exports;\n\nutils.Program = Program = path.basename(process.argv[1]);\n\nSequenceNumberMax = 100 * 1024 * 1024;\n\nSequenceNumber = 0;\n\nutils.getNextSequenceNumber = function(g) {\n  SequenceNumber++;\n  if (SequenceNumber > SequenceNumberMax) {\n    SequenceNumber = 0;\n  }\n  return SequenceNumber;\n};\n\nutils.trim = function(string) {\n  return string.replace(/(^\\s+)|(\\s+$)/g, '');\n};\n\nutils.log = log = function(message) {\n  var date, time;\n  date = new Date();\n  time = date.toISOString();\n  return console.log(\"\" + time + \" \" + Program + \": \" + message);\n};\n\nutils.logVerbose = function(message) {\n  var _ref;\n  if (!(utils != null ? (_ref = utils.options) != null ? _ref.verbose : void 0 : void 0)) {\n    return;\n  }\n  return log(message);\n};\n\nutils.logDebug = function(message) {\n  var _ref;\n  if (!(utils != null ? (_ref = utils.options) != null ? _ref.debug : void 0 : void 0)) {\n    return;\n  }\n  return log(message);\n};\n\nutils.exit = function(message) {\n  log(message);\n  return process.exit(1);\n};\n\nutils.pitch = function(message) {\n  log(message);\n  throw message;\n};\n\nutils.setOptions = function(options) {\n  return utils.options = options;\n};\n\nutils.ensureInteger = function(value, message) {\n  var newValue;\n  newValue = parseInt(value);\n  if (isNaN(newValue)) {\n    utils.exit(\"\" + message + \": '\" + value + \"'\");\n  }\n  return newValue;\n};\n\nutils.ensureString = function(value, message) {\n  if (typeof value !== 'string') {\n    utils.exit(\"\" + message + \": '\" + value + \"'\");\n  }\n  return value;\n};\n\nutils.ensureBoolean = function(value, message) {\n  var newValue, uValue;\n  uValue = value.toString().toUpperCase();\n  newValue = null;\n  switch (uValue) {\n    case 'TRUE':\n      newValue = true;\n      break;\n    case 'FALSE':\n      newValue = false;\n  }\n  if (typeof newValue !== 'boolean') {\n    utils.exit(\"\" + message + \": '\" + value + \"'\");\n  }\n  return newValue;\n};\n\nutils.setNamesForClass = function(aClass) {\n  var key, val, _ref, _results;\n  for (key in aClass) {\n    if (!__hasProp.call(aClass, key)) continue;\n    val = aClass[key];\n    if (typeof val === \"function\") {\n      val.signature = \"\" + aClass.name + \"::\" + key;\n      val.displayName = val.signature;\n      val.name = val.signature;\n    }\n  }\n  _ref = aClass.prototype;\n  _results = [];\n  for (key in _ref) {\n    if (!__hasProp.call(_ref, key)) continue;\n    val = _ref[key];\n    if (typeof val === \"function\") {\n      val.signature = \"\" + aClass.name + \".\" + key;\n      val.displayName = val.signature;\n      _results.push(val.name = val.signature);\n    } else {\n      _results.push(void 0);\n    }\n  }\n  return _results;\n};\n\nutils.registerClass = function(aClass) {\n  utils.setNamesForClass(aClass);\n  return aClass;\n};\n\nutils.alignLeft = function(string, length) {\n  while (string.length < length) {\n    string = \"\" + string + \" \";\n  }\n  return string;\n};\n\nutils.alignRight = function(string, length) {\n  while (string.length < length) {\n    string = \" \" + string;\n  }\n  return string;\n};\n\nutils.fileExistsSync = function(name) {\n  if (fs.existsSync) {\n    return fs.existsSync(name);\n  }\n  return path.existsSync(name);\n};\n\nError.prepareStackTrace = function(error, structuredStackTrace) {\n  var callSite, file, func, funcName, line, longestFile, longestLine, result, _i, _j, _len, _len1;\n  result = [];\n  result.push(\"---------------------------------------------------------\");\n  result.push(\"error: \" + error);\n  result.push(\"---------------------------------------------------------\");\n  result.push(\"stack: \");\n  longestFile = 0;\n  longestLine = 0;\n  for (_i = 0, _len = structuredStackTrace.length; _i < _len; _i++) {\n    callSite = structuredStackTrace[_i];\n    file = callSite.getFileName();\n    line = callSite.getLineNumber();\n    file = path.basename(file);\n    line = \"\" + line;\n    if (file.length > longestFile) {\n      longestFile = file.length;\n    }\n    if (line.length > longestLine) {\n      longestLine = line.length;\n    }\n  }\n  for (_j = 0, _len1 = structuredStackTrace.length; _j < _len1; _j++) {\n    callSite = structuredStackTrace[_j];\n    func = callSite.getFunction();\n    file = callSite.getFileName();\n    line = callSite.getLineNumber();\n    file = path.basename(file);\n    line = \"\" + line;\n    file = utils.alignRight(file, longestFile);\n    line = utils.alignLeft(line, longestLine);\n    funcName = func.displayName || func.name || callSite.getFunctionName();\n    callSite.getMethodName();\n    '???';\n    if (funcName === \"Module._compile\") {\n      result.pop();\n      result.pop();\n      break;\n    }\n    result.push(\"   \" + file + \":\" + line + \" - \" + funcName + \"()\");\n  }\n  return result.join(\"\\n\");\n};\n","/home/travis/build/npmtest/node-npmtest-weinre/weinre/lib/jsonBodyParser.js":"// Generated by CoffeeScript 1.8.0\nvar jsonBodyParser, parseBodyAsJSON;\n\njsonBodyParser = function() {\n  return function(request, response, next) {\n    return parseBodyAsJSON(request, response, next);\n  };\n};\n\nparseBodyAsJSON = function(request, response, next) {\n  var buffer;\n  if (request.body) {\n    return next();\n  }\n  request.body = {};\n  if (request.method !== 'POST') {\n    return next();\n  }\n  request.setEncoding('utf8');\n  buffer = '';\n  request.on('data', function(chunk) {\n    return buffer += chunk;\n  });\n  return request.on('end', function() {\n    var e;\n    if ('' === buffer) {\n      return next();\n    }\n    try {\n      request.body = JSON.parse(buffer);\n      return next();\n    } catch (_error) {\n      e = _error;\n      return next(e);\n    }\n  });\n};\n\nmodule.exports = jsonBodyParser;\n","/home/travis/build/npmtest/node-npmtest-weinre/weinre/lib/HttpChannelHandler.js":"// Generated by CoffeeScript 1.8.0\nvar Channel, HttpChannelHandler, channelManager, handleCreate, handleError, handleGet, handleOptions, handlePost, setCORSHeaders, setCacheHeaders, utils, _;\n\n_ = require('underscore');\n\nutils = require('./utils');\n\nChannel = require('./Channel');\n\nchannelManager = require('./channelManager');\n\nmodule.exports = utils.registerClass(HttpChannelHandler = (function() {\n  function HttpChannelHandler(pathPrefix) {\n    this.pathPrefix = pathPrefix;\n    if (this.pathPrefix === '/ws/client') {\n      this.isClient = true;\n    } else if (this.pathPrefix === '/ws/target') {\n      this.isClient = false;\n    } else {\n      utils.pitch(\"invalid pathPrefix: \" + this.pathPrefix);\n    }\n    this.isTarget = !this.isClient;\n  }\n\n  HttpChannelHandler.prototype.handle = function(request, response, uri) {\n    var channelName, parts;\n    setCORSHeaders(request, response);\n    setCacheHeaders(request, response);\n    if (uri[0] !== '/') {\n      return handleError(request, response, 404);\n    }\n    if (uri === '/') {\n      if (request.method === 'OPTIONS') {\n        return handleOptions(request, response);\n      }\n      if (request.method === 'POST') {\n        return handleCreate(this.pathPrefix, this.isClient, request, response);\n      }\n      return handleError(request, response, 405);\n    }\n    parts = uri.split('/');\n    if (parts.length > 2) {\n      return handleError(request, response, 404);\n    }\n    channelName = parts[1];\n    if (request.method === 'OPTIONS') {\n      return handleOptions(request, response);\n    }\n    if (request.method === 'GET') {\n      return handleGet(request, response, channelName);\n    }\n    if (request.method === 'POST') {\n      return handlePost(request, response, channelName);\n    }\n    return handleError(request, response, 405);\n  };\n\n  return HttpChannelHandler;\n\n})());\n\nhandleCreate = function(pathPrefix, isClient, request, response) {\n  var channel, id, remoteAddress, _ref, _ref1;\n  id = (_ref = request.body) != null ? _ref.id : void 0;\n  remoteAddress = ((_ref1 = request.connection) != null ? _ref1.remoteAddress : void 0) || \"\";\n  channel = new Channel(pathPrefix, id, remoteAddress, isClient);\n  response.contentType('application/json');\n  return response.send(JSON.stringify({\n    channel: channel.name,\n    id: channel.id\n  }));\n};\n\nhandleGet = function(request, response, channelName) {\n  var channel, remoteAddress, _ref;\n  remoteAddress = ((_ref = request.connection) != null ? _ref.remoteAddress : void 0) || \"\";\n  channel = channelManager.getChannel(channelName, remoteAddress);\n  if (!channel) {\n    return handleError(request, response, 404);\n  }\n  return channel.getMessages((function(_this) {\n    return function(messages) {\n      if (channel.isClosed) {\n        return handleError(request, response, 404);\n      }\n      if (!messages) {\n        return handleError(request, response, 404);\n      }\n      response.contentType('application/json');\n      return response.send(JSON.stringify(messages));\n    };\n  })(this));\n};\n\nhandlePost = function(request, response, channelName) {\n  var channel, remoteAddress, _ref;\n  remoteAddress = ((_ref = request.connection) != null ? _ref.remoteAddress : void 0) || \"\";\n  channel = channelManager.getChannel(channelName, remoteAddress);\n  if (!channel) {\n    return handleError(request, response, 404);\n  }\n  channel.handleMessages(request.body);\n  return response.send('');\n};\n\nhandleOptions = function(request, response) {\n  return response.send('');\n};\n\nhandleError = function(request, response, status) {\n  return response.send(status);\n};\n\nsetCORSHeaders = function(request, response) {\n  var origin;\n  origin = request.header('Origin');\n  if (!origin) {\n    return;\n  }\n  response.header('Access-Control-Allow-Origin', origin);\n  response.header('Access-Control-Max-Age', '600');\n  return response.header('Access-Control-Allow-Methods', 'GET, POST');\n};\n\nsetCacheHeaders = function(request, response) {\n  response.header('Pragma', 'no-cache');\n  response.header('Expires', '0');\n  response.header('Cache-Control', 'no-cache');\n  return response.header('Cache-Control', 'no-store');\n};\n","/home/travis/build/npmtest/node-npmtest-weinre/weinre/lib/Channel.js":"// Generated by CoffeeScript 1.8.0\nvar AnonymousId, Channel, MessageQueue, channelManager, genJSON, messageHandler, parseJSON, utils, _,\n  __slice = [].slice;\n\n_ = require('underscore');\n\nutils = require('./utils');\n\nchannelManager = require('./channelManager');\n\nmessageHandler = require('./messageHandler');\n\nMessageQueue = require('./MessageQueue');\n\nAnonymousId = 'anonymous';\n\nmodule.exports = utils.registerClass(Channel = (function() {\n  function Channel(pathPrefix, id, remoteAddress, isClient) {\n    var prefix;\n    this.pathPrefix = pathPrefix;\n    this.id = id;\n    this.remoteAddress = remoteAddress;\n    this.isClient = isClient;\n    prefix = this.isClient ? 'c-' : 't-';\n    this.name = \"\" + prefix + (utils.getNextSequenceNumber());\n    this.messageQueue = new MessageQueue;\n    this.isClosed = false;\n    this.connections = [];\n    this.isTarget = !this.isClient;\n    this.readTimeout = utils.options.readTimeout * 1000;\n    if (!this.id) {\n      this.id = AnonymousId;\n    }\n    this.description = {\n      channel: this.name,\n      id: this.id,\n      hostName: this.remoteAddress,\n      remoteAddress: this.remoteAddress\n    };\n    this.updateLastRead();\n    channelManager.created(this);\n  }\n\n  Channel.prototype.close = function() {\n    if (this.isClosed) {\n      return;\n    }\n    channelManager.destroyed(this);\n    this.isClosed = true;\n    return this.messageQueue.shutdown();\n  };\n\n  Channel.prototype.sendCallback = function() {\n    var args, callbackId, intfName;\n    intfName = arguments[0], callbackId = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];\n    if (!callbackId) {\n      return;\n    }\n    args.unshift(callbackId);\n    return this.sendMessage.apply(this, [intfName, 'sendCallback'].concat(__slice.call(args)));\n  };\n\n  Channel.prototype.sendMessage = function() {\n    var args, intfName, message, method;\n    intfName = arguments[0], method = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];\n    message = genJSON({\n      \"interface\": intfName,\n      method: method,\n      args: args\n    });\n    return this.messageQueue.push(message);\n  };\n\n  Channel.prototype.handleMessages = function(messages) {\n    var message, _i, _len, _results;\n    _results = [];\n    for (_i = 0, _len = messages.length; _i < _len; _i++) {\n      message = messages[_i];\n      message = parseJSON(message);\n      if (!message) {\n        continue;\n      }\n      _results.push(messageHandler.handleMessage(this, message));\n    }\n    return _results;\n  };\n\n  Channel.prototype.getMessages = function(callback) {\n    this.updateLastRead();\n    if (this.isClosed) {\n      return callback.call(null, null);\n    }\n    return this.messageQueue.pullAll(this.readTimeout, callback);\n  };\n\n  Channel.prototype.updateLastRead = function() {\n    return this.lastRead = (new Date).valueOf();\n  };\n\n  Channel.prototype.toString = function() {\n    var connections;\n    connections = _.map(this.connections, function(val) {\n      return val.name;\n    }).join(',');\n    return \"Channel(\" + this.name + \", closed:\" + this.isClosed + \", connections:[\" + connections + \"])\";\n  };\n\n  return Channel;\n\n})());\n\nparseJSON = function(message) {\n  var e;\n  try {\n    return JSON.parse(message);\n  } catch (_error) {\n    e = _error;\n    return null;\n  }\n};\n\ngenJSON = function(message) {\n  var e;\n  try {\n    return JSON.stringify(message);\n  } catch (_error) {\n    e = _error;\n    return null;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-weinre/weinre/lib/channelManager.js":"// Generated by CoffeeScript 1.8.0\nvar ChannelManager, WeinreClientEvents, WeinreTargetEvents, channelManager, serviceManager, utils, _;\n\n_ = require('underscore');\n\nutils = require('./utils');\n\nserviceManager = require('./serviceManager');\n\nWeinreClientEvents = null;\n\nWeinreTargetEvents = null;\n\nchannelManager = null;\n\nutils.registerClass(ChannelManager = (function() {\n  function ChannelManager() {\n    this.channels = {};\n  }\n\n  ChannelManager.prototype.initialize = function() {\n    WeinreClientEvents = serviceManager.get('WeinreClientEvents');\n    WeinreTargetEvents = serviceManager.get('WeinreTargetEvents');\n    if (!WeinreClientEvents) {\n      utils.exit('WeinreClientEvents service not registered');\n    }\n    if (!WeinreTargetEvents) {\n      return utils.exit('WeinreTargetEvents service not registered');\n    }\n  };\n\n  ChannelManager.prototype.created = function(channel) {\n    return this.channels[channel.name] = channel;\n  };\n\n  ChannelManager.prototype.destroyed = function(channel) {\n    var clients, connection, _i, _j, _len, _len1, _ref, _ref1;\n    if (channel.isClient) {\n      _ref = channel.connections;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        connection = _ref[_i];\n        this.disconnectChannels(channel, connection);\n      }\n    } else {\n      _ref1 = channel.connections;\n      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n        connection = _ref1[_j];\n        this.disconnectChannels(connection, channel);\n      }\n    }\n    clients = this.getClientChannels(channel.id);\n    if (channel.isClient) {\n      WeinreClientEvents.clientUnregistered(clients, channel.name);\n    } else {\n      WeinreClientEvents.targetUnregistered(clients, channel.name);\n    }\n    return delete this.channels[channel.name];\n  };\n\n  ChannelManager.prototype.getChannel = function(name, remoteAddress) {\n    var channel;\n    if (!_.has(this.channels, name)) {\n      return null;\n    }\n    channel = this.channels[name];\n    if (!channel) {\n      return null;\n    }\n    return channel;\n  };\n\n  ChannelManager.prototype.connectChannels = function(client, target) {\n    var clients;\n    if (client.isClosed || target.isClosed) {\n      return;\n    }\n    if (client.connections.length) {\n      this.disconnectChannels(client, client.connections[0]);\n    }\n    client.connections.push(target);\n    target.connections.push(client);\n    clients = this.getClientChannels(client.id);\n    WeinreClientEvents.connectionCreated(clients, client.name, target.name);\n    return WeinreTargetEvents.connectionCreated(target, client.name, target.name);\n  };\n\n  ChannelManager.prototype.disconnectChannels = function(client, target) {\n    var clients;\n    clients = this.getClientChannels(client.id);\n    WeinreClientEvents.connectionDestroyed(clients, client.name, target.name);\n    WeinreTargetEvents.connectionDestroyed(target, client.name, target.name);\n    client.connections = _.without(client.connections, target);\n    return target.connections = _.without(target.connections, client);\n  };\n\n  ChannelManager.prototype.getChannels = function(id) {\n    if (id != null) {\n      return _.filter(this.channels, function(item) {\n        return item.id === id;\n      });\n    } else {\n      return _.values(this.channels);\n    }\n  };\n\n  ChannelManager.prototype.getClientChannels = function(id) {\n    return _.filter(this.channels, function(item) {\n      return item.isClient && item.id === id;\n    });\n  };\n\n  ChannelManager.prototype.getTargetChannels = function(id) {\n    return _.filter(this.channels, function(item) {\n      return item.isTarget && item.id === id;\n    });\n  };\n\n  return ChannelManager;\n\n})());\n\nmodule.exports = new ChannelManager;\n","/home/travis/build/npmtest/node-npmtest-weinre/weinre/lib/serviceManager.js":"// Generated by CoffeeScript 1.8.0\nvar ServiceManager, Services, fs, getMethodProxy, getServiceInterface, path, utils, _,\n  __slice = [].slice;\n\npath = require('path');\n\nfs = require('fs');\n\n_ = require('underscore');\n\nutils = require('./utils');\n\nServices = {};\n\nutils.registerClass(ServiceManager = (function() {\n  function ServiceManager() {\n    this.services = {};\n  }\n\n  ServiceManager.prototype.get = function(name) {\n    if (_.has(this.services, name)) {\n      return this.services[name];\n    }\n    return null;\n  };\n\n  ServiceManager.prototype.registerLocalClass = function(name) {\n    var e, serviceClass;\n    serviceClass = null;\n    try {\n      serviceClass = require(\"./service/\" + name);\n    } catch (_error) {\n      e = _error;\n      utils.log(\"local service class not found: \" + name);\n      throw e;\n    }\n    return this.services[name] = new serviceClass;\n  };\n\n  ServiceManager.prototype.registerProxyClass = function(name) {\n    var intf, method, service, _i, _len, _ref;\n    intf = getServiceInterface(name);\n    if (!intf) {\n      utils.exit(\"proxy service class not found: \" + name);\n    }\n    if (intf.name !== name) {\n      utils.exit(\"proxy interface '\" + intf.name + \"' loaded when '\" + name + \"' requested\");\n    }\n    service = {};\n    _ref = intf.methods;\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      method = _ref[_i];\n      service[method.name] = getMethodProxy(name, method.name);\n    }\n    return this.services[name] = service;\n  };\n\n  return ServiceManager;\n\n})());\n\ngetMethodProxy = function(intfName, methodName) {\n  return function() {\n    var args, channel, channels, _i, _len, _results;\n    channels = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n    if (!_.isArray(channels)) {\n      channels = [channels];\n    }\n    _results = [];\n    for (_i = 0, _len = channels.length; _i < _len; _i++) {\n      channel = channels[_i];\n      _results.push(channel.sendMessage.apply(channel, [intfName, methodName].concat(__slice.call(args))));\n    }\n    return _results;\n  };\n};\n\ngetServiceInterface = function(name) {\n  var contents, fileName, jsonName, serviceInterface;\n  jsonName = \"\" + name + \".json\";\n  fileName = path.join(utils.options.staticWebDir, 'interfaces', jsonName);\n  if (!utils.fileExistsSync(fileName)) {\n    return null;\n  }\n  contents = fs.readFileSync(fileName, 'utf8');\n  serviceInterface = JSON.parse(contents);\n  return serviceInterface.interfaces[0];\n};\n\nmodule.exports = new ServiceManager;\n","/home/travis/build/npmtest/node-npmtest-weinre/weinre/lib/messageHandler.js":"// Generated by CoffeeScript 1.8.0\nvar MessageHandler, channelManager, serviceManager, utils,\n  __slice = [].slice;\n\nutils = require('./utils');\n\nchannelManager = require('./channelManager');\n\nserviceManager = require('./serviceManager');\n\nutils.registerClass(MessageHandler = (function() {\n  function MessageHandler() {}\n\n  MessageHandler.prototype.handleMessage = function(channel, message) {\n    return this._serviceMethodInvoker(channel, message[\"interface\"], message.method, message.args);\n  };\n\n  MessageHandler.prototype._serviceMethodInvoker = function(channel, intfName, method, args) {\n    var e, methodSignature, service;\n    methodSignature = \"\" + intfName + \".\" + method + \"()\";\n    service = serviceManager.get(intfName);\n    if (!service) {\n      return this._redirectToConnections(channel, intfName, method, args);\n    }\n    args = args.slice();\n    args.unshift(channel);\n    try {\n      return service[method].apply(service, args);\n    } catch (_error) {\n      e = _error;\n      utils.log(\"error running service method \" + methodSignature + \": \" + e);\n      return utils.log(\"stack:\\n\" + e.stack);\n    }\n  };\n\n  MessageHandler.prototype._redirectToConnections = function(channel, intfName, method, args) {\n    var connection, _i, _len, _ref, _results;\n    _ref = channel.connections;\n    _results = [];\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      connection = _ref[_i];\n      _results.push(connection.sendMessage.apply(connection, [intfName, method].concat(__slice.call(args))));\n    }\n    return _results;\n  };\n\n  return MessageHandler;\n\n})());\n\nmodule.exports = new MessageHandler;\n","/home/travis/build/npmtest/node-npmtest-weinre/weinre/lib/MessageQueue.js":"// Generated by CoffeeScript 1.8.0\nvar MessageQueue, utils, _;\n\n_ = require('underscore');\n\nutils = require('./utils');\n\nmodule.exports = utils.registerClass(MessageQueue = (function() {\n  function MessageQueue() {\n    this.messages = [];\n    this.closed = false;\n    this.callback = null;\n    this.timer = null;\n    _.bindAll(this, '_timerExpired', '_updated');\n  }\n\n  MessageQueue.prototype.shutdown = function() {\n    if (this.closed) {\n      return;\n    }\n    this.closed = true;\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n    if (this.callback) {\n      this.callback.call(null, this.messages);\n    }\n    this.callback = null;\n    this.messages = null;\n    return this.timer = null;\n  };\n\n  MessageQueue.prototype.push = function(message) {\n    if (this.closed) {\n      return;\n    }\n    this.messages.push(message);\n    return process.nextTick(this._updated);\n  };\n\n  MessageQueue.prototype.pullAll = function(timeout, callback) {\n    if (this.closed) {\n      return callback.call(null, null);\n    }\n    if (this.callback) {\n      return callback.call(null, []);\n    }\n    if (this.messages.length) {\n      callback.call(null, this.messages);\n      this.messages = [];\n      return;\n    }\n    this.callback = callback;\n    return this.timer = setTimeout(this._timerExpired, timeout);\n  };\n\n  MessageQueue.prototype._timerExpired = function() {\n    return this._updated();\n  };\n\n  MessageQueue.prototype._updated = function() {\n    var callback, messages;\n    if (this.closed) {\n      return;\n    }\n    if (!this.callback) {\n      return;\n    }\n    callback = this.callback;\n    messages = this.messages;\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n    this.callback = null;\n    this.messages = [];\n    this.timer = null;\n    return callback.call(null, messages);\n  };\n\n  return MessageQueue;\n\n})());\n","/home/travis/build/npmtest/node-npmtest-weinre/weinre/lib/dumpingHandler.js":"// Generated by CoffeeScript 1.8.0\nvar dumpResponse, dumpingHandler, enhance, utils, _;\n\n_ = require('underscore');\n\nutils = require('./utils');\n\ndumpingHandler = function(request, response, uri) {\n  var element, originalSend, _i, _len, _ref, _results;\n  originalSend = response.send;\n  response.send = function(body) {\n    return dumpResponse(originalSend, body, request, response, uri);\n  };\n  if (request.method !== 'POST') {\n    return;\n  }\n  utils.logVerbose('--------------------------------------------------');\n  utils.logVerbose(\"\" + request.method + \" \" + uri + \" [request]\");\n  if (_.isArray(request.body)) {\n    _ref = request.body;\n    _results = [];\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      element = _ref[_i];\n      _results.push(utils.logVerbose(\"   \" + (enhance(JSON.parse(element)))));\n    }\n    return _results;\n  } else {\n    return utils.logVerbose(\"   \" + (enhance(request.body)));\n  }\n};\n\ndumpResponse = function(originalSend, body, request, response, uri) {\n  var e, element, _i, _len, _ref, _results;\n  originalSend.call(response, body);\n  if ((_ref = request.method) !== 'GET' && _ref !== 'POST') {\n    return;\n  }\n  try {\n    body = JSON.parse(body);\n  } catch (_error) {\n    e = _error;\n    return;\n  }\n  if (_.isArray(body) && (body.length === 0)) {\n    return;\n  }\n  utils.logVerbose('--------------------------------------------------');\n  utils.logVerbose(\"\" + request.method + \" \" + uri + \" \" + response.statusCode + \" [response]\");\n  if (_.isArray(body)) {\n    _results = [];\n    for (_i = 0, _len = body.length; _i < _len; _i++) {\n      element = body[_i];\n      _results.push(utils.logVerbose(\"   \" + (enhance(JSON.parse(element)))));\n    }\n    return _results;\n  } else {\n    return utils.logVerbose(\"   \" + (enhance(body)));\n  }\n};\n\nenhance = function(object) {\n  var args, signature;\n  if (!object[\"interface\"] || !object.method || !object.args) {\n    return JSON.stringify(object);\n  }\n  signature = \"\" + object[\"interface\"] + \".\" + object.method;\n  args = JSON.stringify(object.args);\n  if (args.length > 500) {\n    args = \"\" + (args.substr(0, 50)) + \"...\";\n  }\n  return \"\" + signature + \"(\" + args + \")\";\n};\n\nmodule.exports = dumpingHandler;\n"}